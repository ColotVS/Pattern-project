package Factory;

public class Factory { //Creational patterns, Порождающий паттерн
    //Что такое Фабрика?
    //Шаблон проектирования Фабрика позволяет управлять созданием объектов.

    //Процесс создания нового объекта не то чтобы прост, но и не слишком сложен.
    //Все мы знаем, что для создания нового объекта необходимо использовать оператор new.
    //И может показаться, что здесь нечем управлять, однако это не так.

    //Сложности могут возникнуть, когда в нашем приложении есть некоторый класс,
    //у которого есть множество наследников, и необходимо создавать экземпляр определенного
    //класса в зависимости от некоторых условий.

    //Фабрика — это шаблон проектирования,
    //который помогает решить проблему создания различных объектов в зависимости от некоторых условий.


    //5 шагов к открытию собственной фабрики

    //Шаг 1. У тебя в программе класс с несколькими потомками
    //class Cat
    //class Tiger extends Cat
    //class Lion extends Cat
    //class Barsik extends Cat

    //Шаг 2. Ты создаешь enum, в котором определяешь enum-переменную для каждого класса-наследника:
    //enum CatType {
    //    LION,
    //    TIGER,
    //    BARSIK
    //}

    //Шаг 3. Ты строишь свою фабрику. Называешь её MyClassFactory, код ниже:
    //class CatFactory {}

    //Шаг 4. Ты создаешь в своей фабрике метод createMyClass,
    //который принимает в себя переменную-enum MyClassType. Код ниже:

    //class CatFactory {
    //    public Cat createCat(CatType type) {
    //
    //    }
    //}

    //Шаг 5. Ты пишешь в теле метода блок switch-case,
    //в котором перебираешь все enum значения и создаешь экземпляр класса, соответствующий enum значению:
    //class CatFactory {
    //        public Cat createCat(CatType type) {
    //            Cat cat = null;
    //
    //            switch (type) {
    //                case LION:
    //                    cat =  new Barsik();
    //                    break;
    //                case TIGER:
    //                    cat = new Tiger();
    //                    break;
    //                case BARSIK:
    //                    cat =  new Lion();
    //                    break;
    //            }
    //
    //            return cat;
    //        }
    //    }


}
